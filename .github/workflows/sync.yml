name: sync

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: Issue number of original pull request
        required: true

env:
  BASE_REPOSITORY: "shota-kamezawa/base_repository"
  ALLOWED_BRANCH_PREFIX: "epic-"
  EXCLUDED_EXT_PATTERN: "\\.(mdx|mock\\.json|stories\\.js)$"
  BASE_SRC_DIR: "src/app/"
  COPY_SRC_DIR: "src/"
  BASE_IMPORT_PREFIX_PATTERN: "[@~]/app/"
  COPY_IMPORT_PREFIX: "@/"
  TEAM_REVIEWERS: "frontend-team"

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code ðŸ›Ž
        uses: actions/checkout@main

      - name: Fetch this repository
        run: git fetch

      - name: Get detail of pull request
        id: pr_detail
        run: |
          TEMP_JSON=$(mktemp)
          curl -fsSL \
            -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ env.BASE_REPOSITORY }}/pulls/${{ github.event.inputs.pr_number }}" \
            > $TEMP_JSON
          echo "::set-output name=html_url::$(jq -r '.html_url' $TEMP_JSON)"
          echo "::set-output name=merge_commit_sha::$(jq -r '.merge_commit_sha' $TEMP_JSON)"
          echo "::set-output name=base_ref::$(jq -r '.base.ref' $TEMP_JSON)"
          echo "::set-output name=title::$(jq -r '.title' $TEMP_JSON)"
          echo "::set-output name=user_login::$(jq -r '.user.login' $TEMP_JSON)"
          echo "::set-output name=user_id::$(jq -r '.user.id' $TEMP_JSON)"
          echo "::set-output name=user_html_url::$(jq -r '.user.html_url' $TEMP_JSON)"

      - name: Exit if base branch name is not allowed
        if: startsWith(steps.pr_detail.outputs.base_ref, env.ALLOWED_BRANCH_PREFIX) != true
        run: exit 1

      - name: Create epic branch and push it if not exists
        run: |
          git switch ${{ steps.pr_detail.outputs.base_ref }} 2> /dev/null \
            || (git switch -c ${{ steps.pr_detail.outputs.base_ref }} && git push origin ${{ steps.pr_detail.outputs.base_ref }})

      - name: Get files changed of pull request
        id: pr_files_changed
        run: |
          TEMP_JSON=$(mktemp)
          curl -fsSL \
            -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ env.BASE_REPOSITORY }}/pulls/${{ github.event.inputs.pr_number }}/files" \
            > $TEMP_JSON
          REMOVED=$( \
            jq -r '.[] | select(.previous_filename or .status == "removed") | .previous_filename // .filename' $TEMP_JSON \
              | (grep '^${{ env.BASE_SRC_DIR }}' | grep -vE '${{ env.EXCLUDED_EXT_PATTERN }}') || true \
          )
          UPDATED=$( \
            jq -r '.[] | select(.status != "removed") | .filename' $TEMP_JSON \
              | (grep '^${{ env.BASE_SRC_DIR }}' | grep -vE '${{ env.EXCLUDED_EXT_PATTERN }}') || true \
          )
          REMOVED="${REMOVED//'%'/'%25'}"
          REMOVED="${REMOVED//$'\n'/'%0A'}"
          REMOVED="${REMOVED//$'\r'/'%0D'}"
          UPDATED="${UPDATED//'%'/'%25'}"
          UPDATED="${UPDATED//$'\n'/'%0A'}"
          UPDATED="${UPDATED//$'\r'/'%0D'}"
          echo "::set-output name=removed::$REMOVED"
          echo "::set-output name=updated::$UPDATED"

      - name: Remove current files
        if: steps.pr_files_changed.outputs.removed != ''
        run: |
          echo "${{ steps.pr_files_changed.outputs.removed }}" \
            | sed -e 's ^${{ env.BASE_SRC_DIR }} ${{ env.COPY_SRC_DIR }} g' \
            | while read PATH_TO_REMOVE
          do
            rm -f "$PATH_TO_REMOVE"
          done

      - name: Clone base repository
        uses: actions/checkout@main
        with:
          path: ${{ env.BASE_REPOSITORY }}
          repository: ${{ env.BASE_REPOSITORY }}
          ref: ${{ steps.pr_detail.outputs.merge_commit_sha }}

      - name: Replace JavaScript/SCSS import paths
        if: steps.pr_files_changed.outputs.updated != ''
        run: |
          echo "${{ steps.pr_files_changed.outputs.updated }}" | while read PATH_TO_MODIFY
          do
            env LC_ALL=C \
              sed -i -e 's ${{ env.BASE_IMPORT_PREFIX_PATTERN }} ${{ env.COPY_IMPORT_PREFIX }} g' "${{ env.BASE_REPOSITORY }}/$PATH_TO_MODIFY"
          done

      - name: Move files from base repository
        if: steps.pr_files_changed.outputs.updated != ''
        run: |
          echo "${{ steps.pr_files_changed.outputs.updated }}" | while read PATH_TO_MOVE
          do
            PATH_TO_PUT=$(echo $PATH_TO_MOVE | sed -e 's ^${{ env.BASE_SRC_DIR }} ${{ env.COPY_SRC_DIR }} g')
            mkdir -p $(dirname "$PATH_TO_PUT")
            mv -f "${{ env.BASE_REPOSITORY }}/$PATH_TO_MOVE" "$PATH_TO_PUT"
          done

      - name: Remove directory of base repository
        run: rm -rf ${{ env.BASE_REPOSITORY }}

      - name: Create pull request
        uses: peter-evans/create-pull-request@main
        with:
          # Branch & Commit settings
          author: ${{ steps.pr_detail.outputs.user_login }} <${{ steps.pr_detail.outputs.user_id }}+${{ steps.pr_detail.outputs.user_login }}@users.noreply.github.com>
          branch: ${{ steps.pr_detail.outputs.base_ref }}--sync
          branch-suffix: timestamp
          commit-message: ðŸ”„ sync with ${{ env.BASE_REPOSITORY }}/${{ steps.pr_detail.outputs.merge_commit_sha }}
          # PR settings
          base: ${{ steps.pr_detail.outputs.base_ref }}
          body: |
            | Name | Detail |
            | --- | --- |
            | Developer | ${{ steps.pr_detail.outputs.user_html_url }} |
            | Original PR | ${{ steps.pr_detail.outputs.html_url }} |
            | Jobs | ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} |
          delete-branch: true
          labels: sync
          # team-reviewers: ${{ env.TEAM_REVIEWERS }}
          title: ðŸ”„ ${{ steps.pr_detail.outputs.title }}
